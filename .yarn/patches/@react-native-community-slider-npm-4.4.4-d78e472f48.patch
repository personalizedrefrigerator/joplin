diff --git a/android/src/main/java/com/reactnativecommunity/slider/LogHelper.java b/android/src/main/java/com/reactnativecommunity/slider/LogHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..cfc0427f99df9a9ec8314c21bd9aed59cad3df3c
--- /dev/null
+++ b/android/src/main/java/com/reactnativecommunity/slider/LogHelper.java
@@ -0,0 +1,42 @@
+/**
+ * Copyright (c) Facebook, Inc. and its affiliates.
+ *
+ * <p>This source code is licensed under the MIT license found in the LICENSE file in the root
+ * directory of this source tree.
+ */
+package com.reactnativecommunity.slider;
+
+import java.io.BufferedWriter;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.OutputStreamWriter;
+import java.io.PrintWriter;
+import android.content.Context;
+
+
+public class LogHelper {
+	private static LogHelper instance = null;
+
+	public PrintWriter mWriter;
+
+	public LogHelper(Context context) {
+		String logFileName = "log.txt";
+		try {
+			FileOutputStream os = context.openFileOutput(logFileName, Context.MODE_PRIVATE|Context.MODE_APPEND);
+			mWriter = new PrintWriter(new OutputStreamWriter(os));
+		} catch(FileNotFoundException ex) {
+			// Transform from a must-be-caught exception to an ordinary exception
+			throw new RuntimeException(ex);
+		}
+	}
+
+	public static void logMessage(Context context, String message, Object... formatArgs) {
+		if (LogHelper.instance == null) {
+			LogHelper.instance = new LogHelper(context);
+		}
+
+		LogHelper.instance.mWriter.printf(message, formatArgs);
+		LogHelper.instance.mWriter.println();
+		LogHelper.instance.mWriter.flush();
+	}
+}
diff --git a/android/src/main/java/com/reactnativecommunity/slider/ReactSlider.java b/android/src/main/java/com/reactnativecommunity/slider/ReactSlider.java
index 7bf2bdeab76beceb27a5b8fd45645f3344473b68..d2f7615741af3890455695a89762902e9edac45a 100644
--- a/android/src/main/java/com/reactnativecommunity/slider/ReactSlider.java
+++ b/android/src/main/java/com/reactnativecommunity/slider/ReactSlider.java
@@ -225,12 +225,14 @@ public class ReactSlider extends AppCompatSeekBar {
   private void updateLowerLimit() {
     double limit = Math.max(mRealLowerLimit, mMinValue);
     mLowerLimit = (int) Math.round((limit - mMinValue) / (mMaxValue - mMinValue) * getTotalSteps());
+    LogHelper.logMessage(getContext(), "-Update lowerLimit to %d (limit=%f, min=%f, max=%f, steps=%d)", mLowerLimit, limit, mMinValue, mMaxValue, getTotalSteps());
   }
 
   /** Update limit based on props limit, max and min */
   private void updateUpperLimit() {
     double limit = Math.min(mRealUpperLimit, mMaxValue);
     mUpperLimit = (int) Math.round((limit - mMinValue) / (mMaxValue - mMinValue) * getTotalSteps());
+    LogHelper.logMessage(getContext(), "-Update upperLimit to %d (limit=%f, min=%f, max=%f, steps=%d)", mUpperLimit, limit, mMinValue, mMaxValue, getTotalSteps());
   }
 
   /** Update value only (optimization in case only value is set). */
@@ -246,6 +248,10 @@ public class ReactSlider extends AppCompatSeekBar {
     return mStep > 0 ? mStep : mStepCalculated;
   }
 
+  public String getDebugInfo() {
+    return String.format("totalSteps: %d, mStep=%f, stepValue=%f, minValue=%f, maxValue=%f, lowerLimit=%d, upperLimit=%d, realLowerLimit=%f, realUpperLimit=%f", getTotalSteps(), mStep, getStepValue(), mMinValue, mMaxValue, mLowerLimit, mUpperLimit, mRealLowerLimit, mRealUpperLimit);
+  }
+
   private BitmapDrawable getBitmapDrawable(final String uri) {
     BitmapDrawable bitmapDrawable = null;
     ExecutorService executorService = Executors.newSingleThreadExecutor();
diff --git a/android/src/oldarch/java/com/reactnativecommunity/slider/ReactSliderManager.java b/android/src/oldarch/java/com/reactnativecommunity/slider/ReactSliderManager.java
index 3ff5930f85a3cd92c2549925f41058abb188a57e..ea21e2d9c8d02f02d0dd5632a4e3ae4180440673 100644
--- a/android/src/oldarch/java/com/reactnativecommunity/slider/ReactSliderManager.java
+++ b/android/src/oldarch/java/com/reactnativecommunity/slider/ReactSliderManager.java
@@ -26,24 +26,49 @@ public class ReactSliderManager extends SimpleViewManager<ReactSlider> {
 
   private static final SeekBar.OnSeekBarChangeListener ON_CHANGE_LISTENER =
           new SeekBar.OnSeekBarChangeListener() {
+            private int mChangeListenerDepth = 0;
+
             @Override
             public void onProgressChanged(SeekBar seekbar, int progress, boolean fromUser) {
-              ReactSlider slider = (ReactSlider)seekbar;
-
-              if(progress < slider.getLowerLimit()) {
-                progress = slider.getLowerLimit();
-                seekbar.setProgress(progress);
-              } else if(progress > slider.getUpperLimit()) {
-                progress = slider.getUpperLimit();
-                seekbar.setProgress(progress);
-              }
-
-              ReactContext reactContext = (ReactContext) seekbar.getContext();
-              if(fromUser) {
-                reactContext.getNativeModule(UIManagerModule.class).getEventDispatcher().dispatchEvent(
-                  new ReactSliderEvent(
-                    seekbar.getId(),
-                    slider.toRealProgress(progress), true));
+                mChangeListenerDepth ++;
+                try {
+                  // Prevent stackoverflows
+                  if (mChangeListenerDepth > 20) {
+                    LogHelper.logMessage(seekbar.getContext(), "== onProgressChanged: Maximum recursion exceeded ==");
+                    return;
+                  }
+
+                  ReactSlider slider = (ReactSlider)seekbar;
+
+                  LogHelper.logMessage(
+                    seekbar.getContext(),
+                    "== onProgressChanged: { recursionDepth: %d, progress: %d, lowerLimit: %d, upperLimit: %d } ==",
+                    mChangeListenerDepth,
+                    progress,
+                    slider.getLowerLimit(),
+                    slider.getUpperLimit()
+                  );
+                  LogHelper.logMessage(seekbar.getContext(), "   Seekbar props: %s", slider.getDebugInfo());
+
+                  if(progress < slider.getLowerLimit()) {
+                    LogHelper.logMessage(seekbar.getContext(), "  progress(%d) < lowerLimit(%d)", progress, slider.getLowerLimit());
+                    progress = slider.getLowerLimit();
+                    seekbar.setProgress(progress);
+                  } else if(progress > slider.getUpperLimit()) {
+                    LogHelper.logMessage(seekbar.getContext(), "  progress(%d) > upperLimit(%d)", progress, slider.getLowerLimit());
+                    progress = slider.getUpperLimit();
+                    seekbar.setProgress(progress);
+                  }
+
+                  ReactContext reactContext = (ReactContext) seekbar.getContext();
+                  if(fromUser) {
+                    reactContext.getNativeModule(UIManagerModule.class).getEventDispatcher().dispatchEvent(
+                      new ReactSliderEvent(
+                        seekbar.getId(),
+                        slider.toRealProgress(progress), true));
+                  }
+              } finally {
+                mChangeListenerDepth --;
               }
             }
 
@@ -135,31 +160,37 @@ public class ReactSliderManager extends SimpleViewManager<ReactSlider> {
 
   @ReactProp(name = "value", defaultFloat = 0f)
   public void setValue(ReactSlider view, float value) {
+    LogHelper.logMessage(view.getContext(), "prop: setValue to %f", value);
     ReactSliderManagerImpl.setValue(view, value);
   }
 
   @ReactProp(name = "minimumValue", defaultFloat = 0f)
   public void setMinimumValue(ReactSlider view, float value) {
+    LogHelper.logMessage(view.getContext(), "prop: setMinimumValue to %f", value);
     ReactSliderManagerImpl.setMinimumValue(view, value);
   }
 
   @ReactProp(name = "maximumValue", defaultFloat = 1f)
   public void setMaximumValue(ReactSlider view, float value) {
+    LogHelper.logMessage(view.getContext(), "prop: setMaximumValue to %f", value);
     ReactSliderManagerImpl.setMaximumValue(view, value);
   }
 
   @ReactProp(name = "lowerLimit")
   public void setLowerLimit(ReactSlider view, float value) {
+    LogHelper.logMessage(view.getContext(), "prop: setLowerLimit to %f", value);
     ReactSliderManagerImpl.setLowerLimit(view, value);
   }
 
   @ReactProp(name = "upperLimit")
   public void setUpperLimit(ReactSlider view, float value) {
+    LogHelper.logMessage(view.getContext(), "prop: setUpperLimit to %f", value);
     ReactSliderManagerImpl.setUpperLimit(view, value);
   }
 
   @ReactProp(name = "step", defaultFloat = 0f)
   public void setStep(ReactSlider view, float value) {
+    LogHelper.logMessage(view.getContext(), "prop: setStep to %f", value);
     ReactSliderManagerImpl.setStep(view, value);
   }
 
